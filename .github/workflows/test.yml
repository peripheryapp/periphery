name: Test
on:
  push:
    branches:
      - master
  pull_request: {}
env:
  MISE_EXPERIMENTAL: 1
  swift_package_resolve: swift package resolve
  swift_build: swift build
  swift_test: swift test
  periphery_scan: ./.build/debug/periphery scan --quiet --clean-build
  cache_version: 1
jobs:
  lint:
    runs-on: macos-14
    name: Lint
    steps:
      - uses: actions/checkout@master
      - uses: jdx/mise-action@v2
      - run: mise run lint
  macOS:
    strategy:
      fail-fast: false
      matrix:
        xcode: ["16.1", "15.4", "15.2"]
        include:
          - xcode: "16.1"
            macos: macos-14
          - xcode: "15.4"
            macos: macos-14
          - xcode: "15.2"
            macos: macos-14
    runs-on: ${{ matrix.macos }}
    name: macOS
    steps:
    - uses: actions/checkout@master
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app; swift -version
    - name: Get Swift Version
      id: get-swift-version
      run: |
          echo "::set-output name=version::$(swift -version | head -n 1 | sed s/,// )"
      shell: bash
    - name: Cache resolved dependencies
      id: cache-resolved-dependencies
      uses: actions/cache@v2
      with:
        path: |
          .build
          Package.resolved
        key: ${{ runner.os }}-${{ matrix.xcode }}-${{ steps.get-swift-version.outputs.version }}-${{ env.cache_version }}-spm-deps-${{ hashFiles('Package.swift', 'Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.xcode }}-${{ steps.get-swift-version.outputs.version }}-${{ env.cache_version }}-spm-deps-
    - name: Resolve dependencies
      if: steps.cache-resolved-dependencies.outputs.cache-hit != 'true'
      run: ${{ env.swift_package_resolve }}
    - name: Build
      run: ${{ env.swift_build }}
    - name: Scan
      run: ${{ env.periphery_scan }} --strict
    - name: Test
      run: ${{ env.swift_test }}
  linux:
    strategy:
      fail-fast: false
      matrix:
        swift: ["6.0-nightly", "5.10", "5.9"]
        include:
          - swift: "6.0-nightly"
            container: "swiftlang/swift:nightly-6.0-jammy"
            cache-version: 1
          - swift: "5.10"
            container: "swift:5.10"
            cache-version: 1
          - swift: "5.9"
            container: "swift:5.9"
            cache-version: 1
    runs-on: ubuntu-20.04
    container: ${{ matrix.container }}
    name: Linux
    steps:
    - name: Get Swift Version
      id: get-swift-version
      run: |
        echo "::set-output name=version::$(swift -version | head -n 1 | sed s/,// )"
      shell: bash
    - uses: actions/checkout@master
    - name: Cache resolved dependencies
      id: cache-resolved-dependencies
      uses: actions/cache@v2
      with:
        path: |
          .build
          Package.resolved
        key: ${{ matrix.cache-version }}-${{ runner.os }}-${{ steps.get-swift-version.outputs.version }}-${{ env.cache_version }}-spm-deps-${{ hashFiles('Package.swift', 'Package.resolved') }}
        restore-keys: |
          ${{ matrix.cache-version }}-${{ runner.os }}-${{ steps.get-swift-version.outputs.version }}-${{ env.cache_version }}-spm-deps-
    - name: Resolve dependencies
      if: steps.cache-resolved-dependencies.outputs.cache-hit != 'true'
      run: ${{ env.swift_package_resolve }}
    - name: Build
      run: ${{ env.swift_build }}
    - name: Scan
      run: ${{ env.periphery_scan }}
    - name: Test
      run: ${{ env.swift_test }}
